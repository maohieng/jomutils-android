// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        google()
        mavenLocal()
    }

    // Define versions in a single place
    ext {
        // Sdk and tools
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"
        minSdkVersion = 19
        targetSdkVersion = 28

        gradleVersion = '3.4.1'

        // App dependencies
        constraintLayoutVersion = '2.0.0-beta1'
        supportLibVersion = '1.1.0-alpha05'
        legacySupportVersion = '1.0.0'
        lifecycleVersion = '2.0.0'
        materialVersion = '1.0.0'
        roomVersion = '2.1.0-alpha03'

        googleServiceVersion = '4.2.0'
        endpointsVersion = '2.0.0'

        glideVersion = '4.8.0'
        gsonVersion = '2.8.5'
        retrofitVersion = '2.5.0'
        okhttpVersion = '3.12.1'
        butterKnifeVersion = '10.1.0'

        junitVersion = '4.12'
        runnerVersion = '1.1.1'
        coreTestingVersion = '2.0.0'
        espressoVersion = '3.1.1'
        uiAutomatorVersion = '2.2.0-alpha4'
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradleVersion"

//        classpath 'com.novoda:bintray-release:0.8.1'

        // Google Service Plugin
//        classpath "com.google.gms:google-services:$googleServiceVersion"

        // Google Endpoints Plugins
//        classpath "com.google.cloud.tools:endpoints-framework-gradle-plugin:$endpointsVersion"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
}


apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
//apply plugin: 'com.novoda.bintray-release'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def libraryGroupId = 'com.jommobile.android'
def libraryBaseName = 'jomutils'
def libraryVersion = "${versionMajor}.${versionMinor}.${versionPatch}" // release version

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
    }

    // Data binding
    dataBinding {
        enabled = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // UI
    implementation "androidx.appcompat:appcompat:$rootProject.supportLibVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.supportLibVersion"

    // ROOM
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    // use kapt for Kotlin
    // Test helper
    testImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    // annotationProcessor "androidx.lifecycle:lifecycle-compiler:$rootProject.lifecycleVersion" // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"

    // Google API Client Libraries (For Endpoints)
    // See https://cloud.google.com/endpoints/docs/frameworks/java/calling-from-android
    implementation 'com.google.api-client:google-api-client-android:1.27.0'
    //implementation 'com.google.http-client:google-http-client-android:1.27.0'

    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
}

// Maven Publication (https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications)
publishing {
    publications {
        maven(MavenPublication) {
            groupId = libraryGroupId
            artifactId = libraryBaseName
            version = libraryVersion
        }
    }
}

// ====== Maven Local Repository : $ gradlew.bat build publishToMavenLocal
// ====== Maven Central Repository : TODO


// ======== MAVEN DEPLOY to local cache or nexus repo (to make accessible to local projects) (command: ./gradlew clean aRel uploadArchives) ========
//uploadArchives {
//    repositories {
//        // deploy to local
//        mavenDeployer {
//            repository (url: "file://${System.env.HOME}/.m2/repository/")
//            pom.groupId = libraryGroupId
//            pom.artifactId = libraryBaseName
//            pom.version = libraryVersion //Normally I would append "-SNAPSHOT" but newer gradle/maven can't always find them
//            pom.packaging = 'aar'
//            // uniqueVersion = false // don't put in a timestamp on the filename (other project will not be able to depend on it)
//        }
//    }
//}

// ======= BINTRAY DEPLOY (command: $ ./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false) ====
//publish {
//    userOrg = ""
//    groupId = libraryGroupId
//    artifactId = libraryBaseName
//    uploadName = 'PlaylistCore'
//    publishVersion = libraryVersion
//    desc = ""
//    autoPublish = false
//    dryRun = false
//}