// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }

    // Define versions in a single place
    ext {
        // Sdk and tools
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"
        minSdkVersion = 19
        targetSdkVersion = 28

        // Required Gradle version 5.1.1+ (https://developer.android.com/studio/releases/gradle-plugin)
        gradleVersion = '4.0.1'
        kotlinVersion = '1.3.72'

        // App dependencies
        recyclerVersion = '1.2.0-alpha03'
        constraintLayoutVersion = '2.0.0-beta1'
        appCompatVersion = '1.2.0-rc01'
        legacySupportVersion = '1.0.0'
        lifecycleVersion = '2.2.0'
        materialVersion = '1.0.0'
        roomVersion = '2.2.5'
        fragmentVersion = '1.3.0-alpha05'

        googleServiceVersion = '4.2.0'
        endpointsVersion = '2.0.0'

        glideVersion = '4.8.0'
        gsonVersion = '2.8.5'
        retrofitVersion = '2.5.0'
        okhttpVersion = '3.12.1'
        butterKnifeVersion = '10.1.0'

        junitVersion = '4.12'
        runnerVersion = '1.2.0'
        coreTestingVersion = '2.0.0'
        espressoVersion = '3.2.0'
        uiAutomatorVersion = '2.2.0-alpha4'
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradleVersion"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        // Google Service Plugin
//        classpath "com.google.gms:google-services:$googleServiceVersion"

        // Google Endpoints Plugins
//        classpath "com.google.cloud.tools:endpoints-framework-gradle-plugin:$endpointsVersion"

        // android-maven-publish [https://github.com/wupdigital/android-maven-publish]
//        classpath 'digital.wup:android-maven-publish:3.6.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
//apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 4

def libraryGroupId = 'com.jommobile.android'
def libraryBaseName = 'jomutils'
def libraryVersion = "${versionMajor}.${versionMinor}.${versionPatch}" // release version

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100
        versionName libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
    }

    // Data binding
    dataBinding {
        enabled = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])


    // Kotlin support
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
//    kapt "androidx.room:room-compiler:$roomVersion"

    // UI
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerVersion"
    implementation "androidx.fragment:fragment:$fragmentVersion"

    // ROOM
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    // use kapt for Kotlin
    // Test helper
    testImplementation "androidx.room:room-testing:$roomVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    // annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion" // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Google API Client Libraries (For Endpoints)
    // See https://cloud.google.com/endpoints/docs/frameworks/java/calling-from-android
    implementation 'com.google.api-client:google-api-client-android:1.27.0'
    //implementation 'com.google.http-client:google-http-client-android:1.27.0'

    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}


//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    android.libraryVariants.all { variant ->
//        if (variant.name == 'release') {
//            owner.classpath += variant.javaCompile.classpath
//        }
//    }
//    exclude '**/R.html', '**/R.*.html', '**/index.html'
//}

//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

// Maven Publication (https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications)
project.afterEvaluate {
    publishing {
        publications {

            // This works! using [https://github.com/wupdigital/android-maven-publish]
//        android.libraryVariants.all { variant ->
//            "maven${variant.name.capitalize()}Aar"(MavenPublication) {
//                from components.findByName("android${variant.name.capitalize()}")
//                groupId libraryGroupId
//                artifactId libraryBaseName
//                version libraryVersion
//            }
//        }

            // Copy from [https://gist.github.com/Robyer/a6578e60127418b380ca133a1291f017]
            maven(MavenPublication) {
                groupId libraryGroupId
                artifactId libraryBaseName
                version libraryVersion

                artifact bundleReleaseAar
//                artifact androidJavadocsJar
                artifact androidSourcesJar

                // Customize the generated POM
                pom {
                    name = 'Android JomUtils'
                    description = 'An utilities project for developing Android.'
                    url = 'https://github.com/maohieng/jomutils-android'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'maohieng'
                            name = 'MAO Hieng'
                            email = 'maohieng@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/maohieng/jomutils-android.git'
                        developerConnection = 'scm:git:ssh://github.com/maohieng/jomutils-android.git'
                        url = 'https://github.com/maohieng/jomutils-android'
                    }
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
}
// ====== Maven Local Repository : $ gradlew.bat build publishToMavenLocal
// ====== Maven Central Repository :